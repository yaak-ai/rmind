FROM nvidia/cuda:12.2.2-cudnn8-runtime-ubuntu22.04 as build

ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y \
    curl build-essential \
    libbz2-dev libffi-dev liblzma-dev libreadline-dev \
    libsqlite3-dev libssl-dev nvtop pkg-config xz-utils zlib1g-dev \
    rustc libmediainfo0v5 openssh-client git \
    && rm -rf /var/lib/apt/lists/*

ENV PYENV_ROOT="/opt/.pyenv"
RUN curl https://pyenv.run | bash

ARG PYTHON_MAJOR=3.11
ARG PYTHON_MINOR=7
ARG POETRY_VER=1.8.2

ENV PYTHON_VER=$PYTHON_MAJOR.$PYTHON_MINOR \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_VERSION=$POETRY_VER
    
# Add pyenv and poetry to PATH
ENV PATH="${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:$POETRY_HOME/bin:${PATH}"
RUN pyenv install $PYTHON_VER \
    && pyenv global $PYTHON_VER

WORKDIR $POETRY_HOME

RUN --mount=type=ssh \
    curl -sSL https://install.python-poetry.org | python3 -

RUN mkdir -p -m 0700 ~/.ssh  \
    && ssh-keyscan github.com >> ~/.ssh/known_hosts

WORKDIR /opt
COPY poetry.lock poetry.lock
COPY pyproject.toml pyproject.toml

RUN --mount=type=ssh poetry install --with train,dev,lint

FROM nvidia/cuda:12.2.2-cudnn8-runtime-ubuntu22.04

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    python3 libpython3.8 libgl1-mesa-glx libglib2.0-0 libmediainfo0v5 \
    git curl locate \
    && rm -rf /var/lib/apt/lists/* 

# instal ytt
RUN curl https://carvel.dev/install.sh | bash

WORKDIR /opt
COPY --from=build /opt /opt

# RUN ln -s /usr/lib/x86_64-linux-gnu/libnvcuvid.so.1 /usr/local/cuda/lib64/libnvcuvid.so
# # https://github.com/pytorch/pytorch/issues/97041
# # https://stackoverflow.com/questions/76216778/userwarning-applied-workaround-for-cudnn-issue-install-nvrtc-so
# RUN ln -s /opt/.venv/lib/python$PYTHON_MAJOR/site-packages/torch/lib/libnvrtc-*.so.11.2 /opt/.venv/lib/python$PYTHON_MAJOR/site-packages/torch/lib/libnvrtc.so

# Create a non-root user 
ARG USER_ID=1000
RUN useradd -m --no-log-init --system  --uid "${USER_ID}" yaak -g sudo
RUN echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

WORKDIR /home/yaak
COPY cargpt cargpt
COPY tests tests
COPY config config
COPY .git .git
COPY .gitignore .gitignore
COPY train.py train.py
COPY predict.py predict.py
COPY justfile justfile
COPY parse_args.sh parse_args.sh
COPY entrypoint.sh /entrypoint.sh

RUN chown -R "${USER_ID}:root" . \
    && chmod ugo+x /entrypoint.sh

USER yaak

ENV POETRY_HOME="/opt/poetry"

ENV NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=video,compute,utility \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/.venv/lib/python$PYTHON_MAJOR/site-packages \
    PATH=$PATH:/opt/.venv/bin:$POETRY_HOME/bin \
    PYTHONPATH=$PYTHONPATH:/opt:/opt/.venv \
    DECORD_EOF_RETRY_MAX=200000480 \
    PYTHONOPTIMIZE=1

# Container can run as standalone training (default), or as a one-off inference.
# Specify "--train [args]" or "--predict" when running, defaults to --train
ENTRYPOINT ["/entrypoint.sh"]
CMD ["--train", "-h"]
