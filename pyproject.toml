[tool.poetry]
name = "cargpt"
version = "0.1.0"
description = ""
authors = ["yaak <ml@yaak.ai>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
torch = "^2.3.0"
pytorch-lightning = "^2.2.5"
torchvision = "^0.18.0"
torchaudio = "^2.3.0"
tensordict = "^0.4.0"
xformers = "0.0.26.post1"
einops = "^0.8.0"
hydra-core = "^1.3.2"
loguru = "^0.7.2"
jaxtyping = "*"
beartype = "*"
more-itertools = "^9.0.0"
torchinfo = "^1.8.0"
numpy = "*"
typing-extensions = "*"
omegaconf = "^2.3.0"
funcy = { version = "*", optional = true }
wandb = { version = "*", optional = true }

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
cargpt-predict = 'cargpt.scripts.predict:main'

[tool.poetry.extras]
predict = ["funcy", "wandb"]

[tool.poetry.group.train]
optional = true

[tool.poetry.group.train.dependencies]
yaak-datasets = { git = "git@github.com:yaak-ai/yaak-datasets.git", rev = "v0.19.1" }
transformers = "*"
polars = "*"
wandb = "*"

[tool.poetry.group.predict]
optional = true

[tool.poetry.group.predict.dependencies]
yaak-datasets = { git = "git@github.com:yaak-ai/yaak-datasets.git", rev = "v0.19.1" }
rerun-sdk = "^0.16.1"
funcy = "*"
wandb = "*"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
pyright = "*"
ruff = "*"
deptry = "*"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
ipdb = "*"
ipython = "*"
pudb = "*"
ipython-autoimport = "*"
pyfzf = "*"
pyright = "*"
lovely-tensors = "*"
pre-commit = "*"
devtools = "*"
pytest-pudb = "*"

[tool.poetry.group.notebook]
optional = true

[tool.poetry.group.notebook.dependencies]
jupyterlab = "*"
jupyterlab-vim = "*"
hvplot = "*"
euporie = "*"
torchshow = "*"
matplotlib = "*"

[tool.poetry.group.dataviz]
optional = true

[tool.poetry.group.dataviz.dependencies]
rerun-sdk = "^0.16.1"
tqdm = "*"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "*"

[tool.pyright]
typeCheckingMode = "strict"
deprecateTypingAliases = true
enableExperimentalFeatures = true

reportAttributeAccessIssue = "warning"
reportCallInDefaultInitializer = "error"
reportImplicitOverride = "warning"
reportImportCycles = "error"
reportIncompatibleMethodOverride = "warning"
reportMissingParameterType = "none"
reportMissingSuperCall = "warning"
reportMissingTypeStubs = "none"
reportPrivateUsage = "none"
reportPrivateImportUsage = "none"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "none"
reportUnknownArgumentType = "none"
reportUnknownLambdaType = "none"
reportUnknownMemberType = "none"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnusedCallResult = "error"
reportUntypedClassDecorator = "none"

exclude = ['wandb/**', 'cargpt/models/gato.py', '**.ipynb']
ignore = ['wandb/**', 'cargpt/models/gato.py', '**.ipynb']

[tool.ruff]
preview = true
unsafe-fixes = true

[tool.ruff.lint]
select = ["ALL"]
fixable = ["ALL"]
ignore = [
  "A001",
  "A002",
  "ANN",
  "C901",
  "COM812",
  "CPY",
  "D",
  "E203",
  "E501",
  "EXE",
  "F722",
  "F821",
  "FA",
  "FBT003",
  "FIX",
  "ISC001",
  "N",
  "NPY002",
  "PD",
  "PGH",
  "PLR",
  "S101",
  "S311",
  "SIM118",
  "SLF",
  "TCH001",
  "TD",
]

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint.isort]
known-third-party = ["wandb"]
split-on-trailing-comma = false

[tool.deptry.per_rule_ignores]
DEP001 = ["rerun"]
DEP002 = ["torchaudio"]
DEP004 = ["funcy", "polars", "tqdm", "yaak_datasets"]

[tool.pytest.ini_options]
addopts = "--jaxtyping-packages=foo,bar.baz,beartype.beartype"
