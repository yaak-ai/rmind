_target_: rmind.models.control_transformer.ControlTransformer
_recursive_: false
_convert_: all

episode_builder:
  _target_: rmind.components.episode.EpisodeBuilder
  _recursive_: true
  _convert_: all
  timestep:
    - [observation, image, cam_front_left]
    - [observation, continuous, speed]
    - [observation, context, waypoints]
    - [special, special, observation_summary]
    - [special, special, observation_history]
    - [action, continuous, gas_pedal]
    - [action, continuous, brake_pedal]
    - [action, continuous, steering_angle]
    - [action, discrete, turn_signal]
    - [special, special, action_summary]

  special_tokens:
    observation_summary: 0
    observation_history: 1
    action_summary: 2

  input_transform:
    _target_: torch.nn.Sequential
    _convert_: all
    _args_:
      - _target_: rmind.components.nn.Remapper
        paths:
          image:
            cam_front_left: [data, cam_front_left]

          continuous:
            speed: [data, meta/VehicleMotion/speed]
            gas_pedal: [data, meta/VehicleMotion/gas_pedal_normalized]
            gas_pedal_diff: [data, meta/VehicleMotion/gas_pedal_normalized]
            brake_pedal: [data, meta/VehicleMotion/brake_pedal_normalized]
            brake_pedal_diff: [data, meta/VehicleMotion/brake_pedal_normalized]
            steering_angle: [data, meta/VehicleMotion/steering_angle_normalized]
            steering_angle_diff: [data, meta/VehicleMotion/steering_angle_normalized]

          context:
            waypoints: [data, waypoints/xy_normalized]

          discrete:
            turn_signal: [data, meta/VehicleState/turn_signal]

      - _target_: rmind.components.containers.ModuleDict
        modules:
          image:
            _target_: torch.nn.Sequential
            _args_:
              - _target_: einops.layers.torch.Rearrange
                pattern: "... h w c -> ... c h w"
              - _target_: torchvision.transforms.v2.CenterCrop
                size: [320, 576]
              - _target_: torchvision.transforms.v2.Resize
                size: [256, 256]
              - _target_: torchvision.transforms.v2.ToDtype
                scale: true
                dtype:
                  _target_: hydra.utils.get_object
                  path: torch.float32
              - _target_: torchvision.transforms.v2.Normalize
                mean: [0.485, 0.456, 0.406]
                std: [0.229, 0.224, 0.225]

          continuous:
            speed:
              _target_: rmind.components.nn.AtLeast3D

            gas_pedal:
              _target_: rmind.components.nn.AtLeast3D

            gas_pedal_diff:
              _target_: rmind.components.nn.DiffLast
              append:
                _target_: hydra.utils.get_object
                path: math.nan

            brake_pedal:
              _target_: rmind.components.nn.AtLeast3D

            brake_pedal_diff:
              _target_: rmind.components.nn.DiffLast
              append:
                _target_: hydra.utils.get_object
                path: math.nan

            steering_angle:
              _target_: rmind.components.nn.AtLeast3D

            steering_angle_diff:
              _target_: rmind.components.nn.DiffLast
              append:
                _target_: hydra.utils.get_object
                path: math.nan

          discrete:
            _target_: rmind.components.nn.AtLeast3D

          context:
            _target_: torch.nn.Identity

  tokenizers:
    _target_: rmind.components.containers.ModuleDict
    modules:
      image:
        _target_: rmind.components.nn.Identity

      continuous:
        speed:
          _target_: rmind.components.norm.UniformBinner
          range: [0.0, 130.0]
          bins: ${speed_bins}

        gas_pedal:
          _target_: rmind.components.norm.UniformBinner
          range: [0.0, 1.0]
          bins: ${gas_pedal_bins}

        gas_pedal_diff:
          # NOTE: no pre-mulaw scaling since if x in [0.0, 1.0] then dx in [-1.0, 1.0]
          _target_: rmind.components.norm.MuLawEncoding
          quantization_channels: ${gas_pedal_bins}

        brake_pedal:
          _target_: rmind.components.norm.UniformBinner
          range: [0.0, 1.0]
          bins: ${brake_pedal_bins}

        brake_pedal_diff:
          # NOTE: no pre-mulaw scaling since if x in [0.0, 1.0] then dx in [-1.0, 1.0]
          _target_: rmind.components.norm.MuLawEncoding
          quantization_channels: ${brake_pedal_bins}

        steering_angle:
          _target_: rmind.components.norm.UniformBinner
          range: [-1.0, 1.0]
          bins: ${steering_angle_bins}

        steering_angle_diff:
          _target_: rmind.components.nn.Sequential
          _args_:
            - _target_: rmind.components.norm.Scaler
              in_range: [-2.0, 2.0]
              out_range: [-1.0, 1.0]
            - _target_: rmind.components.norm.MuLawEncoding
              quantization_channels: ${steering_angle_bins}

      discrete:
        _target_: rmind.components.nn.Identity

      context:
        waypoints:
          _target_: rmind.components.nn.Identity

  embeddings:
    _target_: rmind.components.containers.ModuleDict
    modules:
      image:
        _target_: torch.nn.Sequential
        _args_:
          - _target_: rmind.components.timm_backbone.TimmBackbone
            model_name: vit_small_patch16_dinov3.lvd1689m
            freeze: True
          - _target_: einops.layers.torch.Rearrange
            pattern: "... c h w -> ... (h w) c"
          - _target_: rmind.components.norm.ScaleByVectorDimensionality
            down: true
            dim: ${embedding_dim}

      continuous:
        speed:
          _target_: rmind.components.nn.Embedding
          num_embeddings: ${speed_bins}
          embedding_dim: ${embedding_dim}
        gas_pedal:
          _target_: rmind.components.nn.Embedding
          num_embeddings: ${gas_pedal_bins}
          embedding_dim: ${embedding_dim}
        brake_pedal:
          _target_: rmind.components.nn.Embedding
          num_embeddings: ${brake_pedal_bins}
          embedding_dim: ${embedding_dim}
        steering_angle:
          _target_: rmind.components.nn.Embedding
          num_embeddings: ${steering_angle_bins}
          embedding_dim: ${embedding_dim}
        gas_pedal_diff: null
        brake_pedal_diff: null
        steering_angle_diff: null

      context:
        waypoints:
          _target_: torch.nn.Sequential
          _args_:
            - _target_: torch.nn.Linear
              in_features: 2
              out_features: ${embedding_dim}

      discrete:
        turn_signal:
          _target_: rmind.components.nn.Embedding
          num_embeddings: 3
          embedding_dim: ${embedding_dim}

      special:
        _target_: rmind.components.nn.Embedding
        num_embeddings: 3
        embedding_dim: ${embedding_dim}

  position_encoding:
    _target_: rmind.components.containers.ModuleDict
    modules:
      image:
        patch:
      #     row:
      #       _target_: rmind.components.nn.Embedding
      #       num_embeddings: 16
      #       embedding_dim: ${embedding_dim}
      #     col:
      #       _target_: rmind.components.nn.Embedding
      #       num_embeddings: 16
      #       embedding_dim: ${embedding_dim}

      observations:
        _target_: rmind.components.nn.Embedding
        num_embeddings: 268 # 16 x 16 + 10 + 1 + 1
        embedding_dim: ${embedding_dim}

      actions:
        _target_: rmind.components.nn.Embedding
        num_embeddings: 1
        embedding_dim: ${embedding_dim}

      special:
        _target_: rmind.components.nn.Embedding
        num_embeddings: 1
        embedding_dim: ${embedding_dim}

      timestep:
        _target_: rmind.components.nn.Embedding
        num_embeddings: 24
        embedding_dim: ${embedding_dim}

encoder:
  _target_: rmind.components.llm.TransformerEncoder
  dim_model: ${embedding_dim}
  num_layers: ${num_layers}
  num_heads: ${num_heads}
  attn_dropout: 0.1
  resid_dropout: 0.1
  mlp_dropout: 0.1
  hidden_layer_multiplier: 1

objectives:
  _target_: rmind.components.containers.ModuleDict
  _convert_: all
  modules:
    inverse_dynamics:
      _target_: rmind.components.objectives.InverseDynamicsPredictionObjective
      encoder: null
      heads:
        _target_: rmind.components.containers.ModuleDict
        modules:
          continuous:
            gas_pedal:
              _target_: torch.nn.Linear
              in_features:
                _target_: operator.mul
                _args_:
                  - 2
                  - ${embedding_dim}
              out_features: ${gas_pedal_bins}
              bias: False
            brake_pedal:
              _target_: torch.nn.Linear
              in_features:
                _target_: operator.mul
                _args_:
                  - 2
                  - ${embedding_dim}
              out_features: ${brake_pedal_bins}
              bias: False
            steering_angle:
              _target_: torch.nn.Linear
              in_features:
                _target_: operator.mul
                _args_:
                  - 2
                  - ${embedding_dim}
              out_features: ${steering_angle_bins}
              bias: False
          discrete:
            turn_signal:
              _target_: torch.nn.Linear
              in_features:
                _target_: operator.mul
                _args_:
                  - 2
                  - ${embedding_dim}
              out_features: 3
              bias: False

      targets:
        continuous:
          gas_pedal: [input_tokens, continuous, gas_pedal]
          brake_pedal: [input_tokens, continuous, brake_pedal]
          steering_angle: [input_tokens, continuous, steering_angle]
        discrete:
          turn_signal: [input_tokens, discrete, turn_signal]

      losses:
        _target_: rmind.components.containers.ModuleDict
        modules:
          continuous:
            gas_pedal:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss
            brake_pedal:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss
            steering_angle:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss
          discrete:
            turn_signal:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss

    forward_dynamics:
      _target_: rmind.components.objectives.ForwardDynamicsPredictionObjective
      encoder: null
      heads:
        _target_: rmind.components.containers.ModuleDict
        modules:
          image:
            cam_front_left:
              _target_: torch.nn.Linear
              in_features:
                _target_: operator.mul
                _args_:
                  - 3
                  - ${embedding_dim}
              out_features: ${embedding_dim}
              bias: False

          continuous:
            speed:
              _target_: torch.nn.Linear
              in_features:
                _target_: operator.mul
                _args_:
                  - 3
                  - ${embedding_dim}
              out_features: ${speed_bins}
              bias: False

      targets:
        image:
          cam_front_left: [input_embeddings, image, cam_front_left]
        continuous:
          speed: [input_tokens, continuous, speed]

      losses:
        _target_: rmind.components.containers.ModuleDict
        modules:
          image:
            cam_front_left:
              _target_: torch.nn.MSELoss
              reduction: mean

          continuous:
            speed:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss

    random_masked_hindsight_control:
      _target_: rmind.components.objectives.RandomMaskedHindsightControlObjective
      encoder: null
      heads:
        _target_: rmind.components.containers.ModuleDict
        modules:
          continuous:
            gas_pedal:
              _target_: torch.nn.Linear
              in_features: ${embedding_dim}
              out_features: ${gas_pedal_bins}
              bias: False

            brake_pedal:
              _target_: torch.nn.Linear
              in_features: ${embedding_dim}
              out_features: ${brake_pedal_bins}
              bias: False

            steering_angle:
              _target_: torch.nn.Linear
              in_features: ${embedding_dim}
              out_features: ${steering_angle_bins}
              bias: False

          discrete:
            turn_signal:
              _target_: torch.nn.Linear
              in_features: ${embedding_dim}
              out_features: 3
              bias: False

      targets:
        continuous:
          gas_pedal: [input_tokens, continuous, gas_pedal]
          brake_pedal: [input_tokens, continuous, brake_pedal]
          steering_angle: [input_tokens, continuous, steering_angle]

        discrete:
          turn_signal: [input_tokens, discrete, turn_signal]

      losses:
        _target_: rmind.components.containers.ModuleDict
        modules:
          continuous:
            gas_pedal:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss
            brake_pedal:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss
            steering_angle:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss

          discrete:
            turn_signal:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss

    memory_extraction:
      _target_: rmind.components.objectives.MemoryExtractionObjective
      encoder: null
      heads:
        _target_: rmind.components.containers.ModuleDict
        modules:
          continuous:
            gas_pedal_diff:
              _target_: torch.nn.Linear
              in_features: ${embedding_dim}
              out_features: ${gas_pedal_bins}
              bias: False

            brake_pedal_diff:
              _target_: torch.nn.Linear
              in_features: ${embedding_dim}
              out_features: ${brake_pedal_bins}
              bias: False

            steering_angle_diff:
              _target_: torch.nn.Linear
              in_features: ${embedding_dim}
              out_features: ${steering_angle_bins}
              bias: False

      targets:
        continuous:
          gas_pedal_diff: [input_tokens, continuous, gas_pedal_diff]
          brake_pedal_diff: [input_tokens, continuous, brake_pedal_diff]
          steering_angle_diff: [input_tokens, continuous, steering_angle_diff]

      losses:
        _target_: rmind.components.containers.ModuleDict
        modules:
          continuous:
            gas_pedal_diff:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss

            brake_pedal_diff:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss

            steering_angle_diff:
              _target_: rmind.components.loss.LogitBiasCrossEntropyLoss

optimizer:
  _target_: rmind.components.optimizers.SelectiveAdamW
  _recursive_: true
  lr: 1e-5
  betas: [0.9, 0.95]
  weight_decay: 0.1
  weight_decay_module_blacklist:
    - _target_: hydra.utils.get_class
      path: torch.nn.Embedding
    - _target_: hydra.utils.get_class
      path: torch.nn.LayerNorm

lr_scheduler:
  interval: step
  scheduler:
    _target_: rmind.components.lr_schedulers.get_cosine_schedule_with_warmup
    num_warmup_steps: 25000
    num_training_steps: 250000
