_target_: cargpt.models.control_transformer.ControlTransformer.load_from_wandb_artifact
artifact: ???
# _target_: cargpt.models.control_transformer.ControlTransformer.load_from_checkpoint
# checkpoint_path: ???
filename: model.ckpt
strict: false
hparams_updaters:
  # wrap hparams in DictConfig
  - _target_: omegaconf.DictConfig
    _partial_: true
  # override objectives to only use copycat/policy
  - _target_: omegaconf.OmegaConf.update
    _partial_: true
    _recursive_: false
    merge: false
    key: objectives
    value:
      _target_: cargpt.utils.ModuleDict
      policy:
        _target_: cargpt.components.objectives.policy.PolicyObjective
        heads:
          _target_: cargpt.utils.ModuleDict
          continuous:
            gas_pedal:
              _target_: torchvision.ops.MLP
              in_channels:
                _target_: operator.mul
                _args_:
                  - 2
                  - ${vars.embedding_dim}
              hidden_channels:
                - 512
                - 2
              bias: False
            brake_pedal:
              _target_: torchvision.ops.MLP
              in_channels:
                _target_: operator.mul
                _args_:
                  - 2
                  - ${vars.embedding_dim}
              hidden_channels:
                - 512
                - 2
              bias: False
            steering_angle:
              _target_: torchvision.ops.MLP
              in_channels:
                _target_: operator.mul
                _args_:
                  - 2
                  - ${vars.embedding_dim}
              hidden_channels:
                - 512
                - 2
              bias: False
        targets:
          continuous:
            gas_pedal:
              _target_: cargpt.components.episode.Episode.get
              _partial_: true
              key: ["inputs", "continuous", "gas_pedal"]
            brake_pedal:
              _target_: cargpt.components.episode.Episode.get
              _partial_: true
              key: ["inputs", "continuous", "brake_pedal"]
            steering_angle:
              _target_: cargpt.components.episode.Episode.get
              _partial_: true
              key: ["inputs", "continuous", "steering_angle"]
        losses:
          _target_: cargpt.utils.ModuleDict
          continuous:
            gas_pedal:
              _target_: cargpt.components.loss.GaussianNLLLoss
            brake_pedal:
              _target_: cargpt.components.loss.GaussianNLLLoss
            steering_angle:
              _target_: cargpt.components.loss.GaussianNLLLoss
  # freeze episode builder (embeddings etc)
  - _target_: omegaconf.OmegaConf.update
    _partial_: true
    _recursive_: false
    merge: true
    key: episode_builder.freeze
    value: true
  # freeze encoder
  - _target_: omegaconf.OmegaConf.update
    _partial_: true
    _recursive_: false
    merge: true
    key: encoder.freeze
    value: true
  # remove objective scheduler since we only have a single objective
  - _target_: omegaconf.OmegaConf.update
    _partial_: true
    _recursive_: false
    merge: false
    key: objective_scheduler
    value: null
  # for some reason lr_scheduler.scheduler isn't checkpointed? re-add
  - _target_: omegaconf.OmegaConf.update
    _partial_: true
    _recursive_: false
    merge: false
    key: lr_scheduler
    value:
      interval: step
      scheduler:
        _target_: transformers.get_cosine_schedule_with_warmup
        num_warmup_steps: 25000
        num_training_steps: 250000
