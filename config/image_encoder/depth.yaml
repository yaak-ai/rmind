patch_row_tokens: 10
patch_col_tokens: 18
local_position_tokens: 256

seq_len: 1116
total_tokens: 4102
tokens_shift: 0
tokens_mask: -100

encoder:
  _target_: torch.nn.ModuleDict
  modules:
    resnet:
      _target_: cargpt.models.encoding.ResnetBackbone
      resnet:
        _target_: torchvision.models.resnet18
        weights: IMAGENET1K_V1
      freeze: True

    depth:
      _target_: cargpt.layers.Sequential
      _args_:
        - _target_: cargpt.models.encoding.DepthEncoder
          disp_net:
            _target_: builtins.getattr
            _args_:
              - _target_: deephouse.models.depth.DepthModule.load_from_wandb_artifact
                _args_: ['yaak/self-supervised-depth/model-6liyv1oe:v0']
              - disp_net
          freeze: True

        - _target_: einops.layers.torch.Rearrange
          pattern: '... h w c -> ... c h w'

        - _target_: cargpt.layers.AvgPool2d
          kernel_size: 32

        - _target_: einops.layers.torch.Rearrange
          pattern: '... c h w -> ... h w c'

        - _target_: cargpt.models.encoding.PointPositionalEncoder3D
          channels: ${embedding_dim}
          temperature: 1e4

        - _target_: einops.layers.torch.Rearrange
          pattern: '... h w c -> ... c h w'

tokenizer:
  _target_: cargpt.models.encoding.ResNetTokens
  tokens_mask: ${..tokens_mask} # should match ignore_index in cross_entropy loss

mean: [0.485, 0.456, 0.406]
std: [0.229, 0.224, 0.225]

transforms:

  - _target_: yaak_datasets.transforms.Crop
    offsets: [2, 2, 0, 0]

  - _target_: yaak_datasets.transforms.Normalize
    # ImageNet stats
    mean: ${...mean}
    std: ${...std}
