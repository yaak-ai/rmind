# @package _global_

defaults:
  - /paths: default
  - /datamodule: default
  - /trainer: default
  - _self_

vars:
  data:
    train:
      batch_size: 64
      clip_length: 6

    val:
      batch_size: 32
      clip_length: 12

    test:
      clip_length: 24

  encoder:
    num_heads: 4
    num_layers: 8

  embedding_dim: 512

wandb:
  group: smart

model:
  _target_: cargpt.models.control_transformer.ControlTransformer
  _recursive_: false

  episode_builder:
    _target_: cargpt.components.episode.EpisodeBuilder
    _recursive_: true

    timestep:
      _target_: cargpt.components.episode.Timestep.build
      _args_:
        - [observation, image, cam_front_left]
        - [observation, continuous, speed]
        - [observation, discrete, turn_signal]
        - [special, observation_summary]
        - [special, observation_history]
        - [action, continuous, gas_pedal]
        - [action, continuous, brake_pedal]
        - [action, continuous, steering_angle]
        - [special, action_summary]

    special_tokens:
      observation_summary: 0
      observation_history: 1
      action_summary: 2

    tokenizers:
      _target_: cargpt.utils.ModuleDict
      image:
        _target_: torch.nn.Identity

      continuous:
        speed:
          _target_: torch.nn.Sequential
          _args_:
            - _target_: cargpt.components.norm.UniformBinner
              in_range: [0.0, 130.0]
              num_bins: 1024

            - _target_: einops.layers.torch.Rearrange
              pattern: b t -> b t 1

        gas_pedal:
          _target_: torch.nn.Sequential
          _args_:
            - _target_: cargpt.components.norm.UniformBinner
              in_range: [0.0, 1.0]
              num_bins: 255

            - _target_: einops.layers.torch.Rearrange
              pattern: b t -> b t 1

        brake_pedal:
          _target_: torch.nn.Sequential
          _args_:
            - _target_: cargpt.components.norm.UniformBinner
              in_range: [0.0, 1.0]
              num_bins: 165

            - _target_: einops.layers.torch.Rearrange
              pattern: b t -> b t 1

        steering_angle:
          _target_: torch.nn.Sequential
          _args_:
            - _target_: cargpt.components.norm.UniformBinner
              in_range: [-1.0, 1.0]
              num_bins: 961

            - _target_: einops.layers.torch.Rearrange
              pattern: b t -> b t 1

      discrete:
        turn_signal:
          _target_: einops.layers.torch.Rearrange
          pattern: b t -> b t 1

    embeddings:
      _target_: cargpt.utils.ModuleDict
      image:
        _target_: torch.nn.Sequential
        _args_:
          - _target_: cargpt.components.resnet.ResnetBackbone
            resnet:
              _target_: torchvision.models.resnet18
              weights: IMAGENET1K_V1
            freeze: True

          - _target_: einops.layers.torch.Rearrange
            pattern: ... c h w -> ... (h w) c

      continuous:
        speed:
          _target_: torch.nn.Embedding
          num_embeddings: ${model.episode_builder.tokenizers.continuous.speed._args_[0].num_bins}
          embedding_dim: ${vars.embedding_dim}

        gas_pedal:
          _target_: torch.nn.Embedding
          num_embeddings: ${model.episode_builder.tokenizers.continuous.gas_pedal._args_[0].num_bins}
          embedding_dim: ${vars.embedding_dim}

        brake_pedal:
          _target_: torch.nn.Embedding
          num_embeddings: ${model.episode_builder.tokenizers.continuous.brake_pedal._args_[0].num_bins}
          embedding_dim: ${vars.embedding_dim}

        steering_angle:
          _target_: torch.nn.Embedding
          num_embeddings: ${model.episode_builder.tokenizers.continuous.steering_angle._args_[0].num_bins}
          embedding_dim: ${vars.embedding_dim}

      discrete:
        turn_signal:
          _target_: torch.nn.Embedding
          num_embeddings: 3
          embedding_dim: ${vars.embedding_dim}

      special:
        _target_: torch.nn.Embedding
        num_embeddings: 3
        embedding_dim: ${vars.embedding_dim}

    position_encoding:
      _target_: cargpt.utils.ModuleDict
      image:
        patch:
          row:
            _target_: torch.nn.Embedding
            num_embeddings: 10
            embedding_dim: ${vars.embedding_dim}
          col:
            _target_: torch.nn.Embedding
            num_embeddings: 18
            embedding_dim: ${vars.embedding_dim}

      observations:
        _target_: torch.nn.Embedding
        num_embeddings: 182
        embedding_dim: ${vars.embedding_dim}

      actions:
        _target_: torch.nn.Embedding
        num_embeddings: 1
        embedding_dim: ${vars.embedding_dim}

      special:
        _target_: torch.nn.Embedding
        num_embeddings: 1
        embedding_dim: ${vars.embedding_dim}

      timestep:
        _target_: torch.nn.Embedding
        num_embeddings: ${vars.data.test.clip_length}
        embedding_dim: ${vars.embedding_dim}

  encoder:
    _target_: cargpt.components.llm.xFormerEncoder
    config:
      _target_: xformers.factory.xFormerEncoderConfig
      reversible: True
      num_layers: ${vars.encoder.num_layers}
      dim_model: ${vars.embedding_dim}
      residual_norm_style: pre
      multi_head_config:
        dim_model: ${vars.embedding_dim}
        num_heads: ${vars.encoder.num_heads}
        residual_dropout: 0.1
        attention:
          name: scaled_dot_product
          dropout: 0.1
          causal: False
      feedforward_config:
        name: MLPGLU
        dropout: 0.1
        activation: gelu
        hidden_layer_multiplier: 1

  objectives:
    _target_: cargpt.utils.ModuleDict

    inverse_dynamics:
      _target_: cargpt.components.objectives.InverseDynamicsPredictionObjective
      heads:
        _target_: cargpt.utils.ModuleDict
        continuous:
          gas_pedal:
            _target_: torch.nn.Sequential
            _args_:
              - _target_: torch.nn.Linear
                in_features:
                  _target_: operator.mul
                  _args_:
                    - 2
                    - ${vars.embedding_dim}
                out_features: ${model.episode_builder.tokenizers.continuous.gas_pedal._args_[0].num_bins}
                bias: False

          brake_pedal:
            _target_: torch.nn.Sequential
            _args_:
              - _target_: torch.nn.Linear
                in_features:
                  _target_: operator.mul
                  _args_:
                    - 2
                    - ${vars.embedding_dim}
                out_features: ${model.episode_builder.tokenizers.continuous.brake_pedal._args_[0].num_bins}
                bias: False

          steering_angle:
            _target_: torch.nn.Sequential
            _args_:
              - _target_: torch.nn.Linear
                in_features:
                  _target_: operator.mul
                  _args_:
                    - 2
                    - ${vars.embedding_dim}
                out_features: ${model.episode_builder.tokenizers.continuous.steering_angle._args_[0].num_bins}
                bias: False

      losses:
        _target_: cargpt.utils.ModuleDict
        continuous:
          gas_pedal:
            _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

          brake_pedal:
            _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

          steering_angle:
            _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

    forward_dynamics:
      _target_: cargpt.components.objectives.ForwardDynamicsPredictionObjective
      heads:
        _target_: cargpt.utils.ModuleDict
        image:
          cam_front_left:
            _target_: torch.nn.Linear
            in_features:
              _target_: operator.mul
              _args_:
                - 3
                - ${vars.embedding_dim}
            out_features: ${vars.embedding_dim}
            bias: False
        continuous:
          speed:
            _target_: torch.nn.Linear
            in_features:
              _target_: operator.mul
              _args_:
                - 3
                - ${vars.embedding_dim}
            out_features: ${model.episode_builder.tokenizers.continuous.speed._args_[0].num_bins}
            bias: False
        discrete:
          turn_signal:
            _target_: torch.nn.Linear
            in_features:
              _target_: operator.mul
              _args_:
                - 3
                - ${vars.embedding_dim}
            out_features: ${model.episode_builder.embeddings.discrete.turn_signal.num_embeddings}
            bias: False

      losses:
        _target_: cargpt.utils.ModuleDict
        image:
          cam_front_left:
            _target_: torch.nn.MSELoss
            reduction: mean
        continuous:
          speed:
            _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss
        discrete:
          turn_signal:
            _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

    random_masked_hindsight_control:
      _target_: cargpt.components.objectives.RandomMaskedHindsightControlObjective
      heads:
        _target_: cargpt.utils.ModuleDict
        continuous:
          gas_pedal:
            _target_: torch.nn.Linear
            in_features: ${vars.embedding_dim}
            out_features: ${model.episode_builder.tokenizers.continuous.gas_pedal._args_[0].num_bins}
            bias: False

          brake_pedal:
            _target_: torch.nn.Linear
            in_features: ${vars.embedding_dim}
            out_features: ${model.episode_builder.tokenizers.continuous.brake_pedal._args_[0].num_bins}
            bias: False

          steering_angle:
            _target_: torch.nn.Linear
            in_features: ${vars.embedding_dim}
            out_features: ${model.episode_builder.tokenizers.continuous.steering_angle._args_[0].num_bins}
            bias: False

      losses:
        _target_: cargpt.utils.ModuleDict
        continuous:
          gas_pedal:
            _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

          brake_pedal:
            _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

          steering_angle:
            _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

    copycat:
      _target_: cargpt.components.objectives.CopycatObjective
      memory_extraction:
        _target_: cargpt.components.objectives.copycat.MemoryExtractionStream

        delta_tokenizers:
          _target_: cargpt.utils.ModuleDict
          continuous:
            gas_pedal:
              # NOTE: no pre-mulaw scaling since if x in [0.0, 1.0] then dx in [-1.0, 1.0]
              _target_: torchaudio.transforms.MuLawEncoding
              quantization_channels: ${vars.embedding_dim}

            brake_pedal:
              # NOTE: no pre-mulaw scaling since if x in [0.0, 1.0] then dx in [-1.0, 1.0]
              _target_: torchaudio.transforms.MuLawEncoding
              quantization_channels: ${vars.embedding_dim}

            steering_angle:
              _target_: torch.nn.Sequential
              _args_:
                - _target_: cargpt.components.norm.Scaler
                  in_range: [-2.0, 2.0]
                  out_range: [-1.0, 1.0]

                - _target_: torchaudio.transforms.MuLawEncoding
                  quantization_channels: ${vars.embedding_dim}

        heads:
          _target_: cargpt.utils.ModuleDict
          continuous:
            gas_pedal:
              _target_: torch.nn.Linear
              in_features: ${vars.embedding_dim}
              out_features: ${model.objectives.copycat.memory_extraction.delta_tokenizers.continuous.gas_pedal.quantization_channels}
              bias: False

            brake_pedal:
              _target_: torch.nn.Linear
              in_features: ${vars.embedding_dim}
              out_features: ${model.objectives.copycat.memory_extraction.delta_tokenizers.continuous.brake_pedal.quantization_channels}
              bias: False

            steering_angle:
              _target_: torch.nn.Linear
              in_features: ${vars.embedding_dim}
              out_features: ${model.objectives.copycat.memory_extraction.delta_tokenizers.continuous.steering_angle._args_[1].quantization_channels}
              bias: False

        losses:
          _target_: cargpt.utils.ModuleDict
          continuous:
            gas_pedal:
              _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

            brake_pedal:
              _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

            steering_angle:
              _target_: cargpt.components.loss.LogitBiasCrossEntropyLoss

  objective_scheduler:
    _target_: cargpt.components.objectives.ObjectiveScheduler
    schedule:
      inverse_dynamics: 0.25
      forward_dynamics: 0.25
      random_masked_hindsight_control: 0.25
      copycat: 0.25
    sample_size: 1

  # TODO: match paper?
  optimizer:
    _target_: cargpt.components.optimizers.SelectiveAdamW
    _recursive_: true
    lr: 1e-5
    betas: [0.9, 0.95]
    weight_decay: 0.1
    weight_decay_module_blacklist:
      - _target_: hydra.utils.get_class
        path: torch.nn.Embedding

      - _target_: hydra.utils.get_class
        path: torch.nn.LayerNorm

      - _target_: hydra.utils.get_class
        path: xformers.triton.FusedLayerNorm

  lr_scheduler:
    interval: step
    scheduler:
      # TODO: this is like 5 lines -- reimplement and drop transformers dep?
      _target_: transformers.get_cosine_schedule_with_warmup
      num_warmup_steps: 25000
      num_training_steps: 250000

datamodule:
  train:
    batch_size: ${vars.data.train.batch_size}
    num_workers: 32
    dataset:
      config:
        data:
          metadata:
            select:
              - message: ImageMetadata
                fields:
                  - name: frame_idx
                  - name: camera_name

              - message: VehicleMotion
                fields:
                  - name: speed
                    merge:
                      method: interp

                  - name: steering_angle_normalized
                    merge:
                      method: interp

                  - name: gas_pedal_normalized
                    merge:
                      method: interp

                  - name: brake_pedal_normalized
                    merge:
                      method: interp

              - message: VehicleState
                fields:
                  - name: turn_signal

            filter: >
              VehicleMotion_speed between 5.0 and 130.0
              and VehicleMotion_gas_pedal_normalized between 0.0 and 1.0
              and VehicleMotion_brake_pedal_normalized between 0.0 and 1.0
              and VehicleMotion_steering_angle_normalized between -1.0 and 1.0

        samples:
          clips:
            length: ${vars.data.train.clip_length}
            stride: 10
            step: 10
            filter: >
              not (
                    array_upper(VehicleMotion_gas_pedal_normalized) <= (1.0/255 + 0.001)
                and array_upper(VehicleMotion_brake_pedal_normalized) <= (1.0/164 + 0.001)
                and array_upper(VehicleMotion_speed) >= 25.0
                and array_get(VehicleMotion_speed, -1) - array_get(VehicleMotion_speed, 0) >= -0.05 * array_mean(VehicleMotion_speed)
              )

          transforms:
            - _target_: yaak_datasets.transforms.Crop
              offsets: [2, 2, 0, 0]

            - _target_: yaak_datasets.transforms.Normalize
              # ImageNet stats
              mean: [0.485, 0.456, 0.406]
              std: [0.229, 0.224, 0.225]

  val:
    batch_size: ${vars.data.val.batch_size}
    num_workers: ${datamodule.train.num_workers}
    dataset:
      config:
        data:
          metadata: ${datamodule.train.dataset.config.data.metadata}
        samples:
          clips:
            length: ${vars.data.val.clip_length}
            stride: ${datamodule.train.dataset.config.samples.clips.stride}
            step: ${datamodule.train.dataset.config.samples.clips.step}
            filter: ${datamodule.train.dataset.config.samples.clips.filter}

          transforms: ${datamodule.train.dataset.config.samples.transforms}
